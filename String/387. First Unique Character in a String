# Approach 1: rindex()
class Solution:
    def firstUniqChar(self, s: str) -> int:
        
        for i, c in enumerate(s):
            if s.index(c) == s.rindex(c):
                return i
            
        return -1
 
 # Approach 2: Counter() --- fastest
   # build hash map : character and how often it appears
        count = collections.Counter(s)
        
        # find the index
        for i, c in enumerate(s):
            if count[c] == 1:
                return i     
        return -1
    
    
   # Approach 3: HashMap
        d={}
        # update character counts into dictionary
        for i, c in enumerate(s):
            if not d.get(c): 
                d.update({c:1})
            else:
                d.update({c:d.get(c)+1})
       # check non repeating value
        for k,v in d.items():
            if(d.get(k) == 1):
                return s.index(k)
        return -1
